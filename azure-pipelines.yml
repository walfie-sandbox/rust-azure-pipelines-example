variables:
  githubConnection: walfie
  binaryName: rust-azure-pipelines-example

trigger:
  branches:
    include: ["*"]
  tags:
    include: ["*"]

jobs:
- job: clippy
  pool:
    vmImage: ubuntu-16.04
  condition: eq(variables['Build.Reason'], 'PullRequest')
  steps:
  - template: ci/install-rust.yml
  - script: rustup component add clippy
    displayName: Install clippy
  - script: cargo clippy --all
    displayName: Run clippy

- job: rustfmt
  pool:
    vmImage: ubuntu-16.04
  condition: eq(variables['Build.Reason'], 'PullRequest')
  steps:
  - template: ci/install-rust.yml
  - script: rustup component add rustfmt
    displayName: Install rustfmt
  - script: cargo fmt --all -- --check
    displayName: Run rustfmt

- job: Test
  strategy:
    matrix:
      linux:
        vmImage: ubuntu-16.04
      mac:
        vmImage: macos-10.13
      windows:
        vmImage: vs2017-win2016
  pool:
    vmImage: $(vmImage)
  steps:
  - template: ci/install-rust.yml
  - script: cargo build --all
    displayName: cargo build
  - script: cargo test --all
    displayName: cargo test

- job: Release
  condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/')
  strategy:
    matrix:
      linux-musl:
        target: x86_64-unknown-linux-musl
        vmImage: ubuntu-16.04
      mac:
        target: x86_64-apple-darwin
        vmImage: macos-10.13
      windows-msvc:
        target: x86_64-pc-windows-msvc
        vmImage: vs2017-win2016
      windows-gnu:
        target: x86_64-pc-windows-gnu
        vmImage: ubuntu-16.04
  pool:
    vmImage: $(vmImage)
  steps:
    - bash: |
        RELEASE_TAG="$(Build.SourceBranch)"
        RELEASE_TAG="${RELEASE_TAG#refs/tags/}"
        echo $RELEASE_TAG
        echo "##vso[task.setvariable variable=releaseTag]$RELEASE_TAG"
      displayName: Get release tag
    - template: ci/install-rust.yml
      parameters:
        target: $(target)
    - script: cargo build --release --all --target $(target)
      displayName: Build
    - task: CopyFiles@2
      displayName: Copy assets
      inputs:
        sourceFolder: $(Build.SourcesDirectory)/target/$(target)/release
        contents: |
          $(binaryName)
          $(binaryName).exe
        targetFolder: $(Build.BinariesDirectory)/$(binaryName)
    - task: ArchiveFiles@2
      displayName: Archive/compress assets (Linux/Mac)
      condition: and(succeeded(), ne(variables['Agent.OS'], 'Windows_NT'))
      inputs:
        rootFolderOrFile: $(Build.BinariesDirectory)/$(binaryName)
        archiveType: tar
        tarCompression: gz
        archiveFile: $(Build.ArtifactStagingDirectory)/$(binaryName)-$(releaseTag)-$(target).tar.gz
    - task: ArchiveFiles@2
      displayName: Archive/compress assets (Windows)
      condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))
      inputs:
        rootFolderOrFile: $(Build.BinariesDirectory)/$(binaryName)
        archiveType: zip
        tarCompression: none
        archiveFile: $(Build.ArtifactStagingDirectory)/$(binaryName)-$(releaseTag)-$(target).zip
    - task: GithubRelease@0
      displayName: Release to GitHub
      inputs:
        gitHubConnection: $(githubConnection)
        repositoryName: $(Build.Repository.Name)
        action: edit
        target: $(Build.SourceVersion)
        tagSource: manual
        tag: $(releaseTag)
        assets: |
          $(Build.ArtifactStagingDirectory)/$(binaryName)-$(releaseTag)-$(target).tar.gz
          $(Build.ArtifactStagingDirectory)/$(binaryName)-$(releaseTag)-$(target).zip
        title: $(releaseTag)
        assetUploadMode: replace
        addChangeLog: true

